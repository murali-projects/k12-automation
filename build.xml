<project name="RunTestSuite" default="runTestSuiteWithFireFoxAndExplorer">
	<description>Automated Selenium Test Suite Runner</description>
	<property file="build.properties" />

	<taskdef resource="testngtasks" classpath="lib/testng-5.11-jdk15.jar" />
	<property environment="env"/>
	<path id="compile.cp">
		<pathelement path="${env.JAVA_HOME}/lib/rt.jar"/>
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="target/classes"/>
	</path>

	<target name="clean">
		<delete dir="target" />
		<delete file="${basedir}/properties/environment.properties" />
	</target>
	
	<target name="init" depends="clean, set.env"/>
	
	<target name="set.env" if="env">
		<echo>Set default selenium server host and port</echo>
		<setEnvMacro env="${env}"/>
	</target>
		    	
	<target name="compile">
		<mkdir dir="target" /> 
		<mkdir dir="target/test" />
		<mkdir dir="target/reports" />
		<mkdir dir="target/classes" />
		<javac srcdir="." destdir="target/classes" includes="**/*.java" classpathref="compile.cp" debug="true" />
	</target>

	<target name="startSeleniumServer">
		<java jar="${selenium.jar.dir}/selenium-server.jar" spawn="true" fork="true">
			<arg line="-p ${selenium.server.port}" />
		</java>
	</target>

	<target name="stopSeleniumServer">
		<get taskname="selenium-shutdown" src="http://${selenium.server.host}:${selenium.server.port}/selenium-server/driver/?cmd=shutDown" dest="target/test/seleniumShutdownResults.txt" ignoreerrors="true" />
		<echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
	</target>

	<target name="runTestSuiteWithFireFox" depends="compile">
		<testng classpath="${testng.classpath}" outputDir="${output.dir}" haltOnFailure="false" verbose="2">
			<xmlfileset dir="." includes="K12BuildSuite.xml" />
		</testng>
	</target>
	
	<target name="runDevTestSuiteWithFireFox" depends="compile">
			<testng classpath="${testng.classpath}" outputDir="${output.dir}" haltOnFailure="false" verbose="2">
				<xmlfileset dir="." includes="K12DevBuildSuite.xml" />
			</testng>
	</target>

	<target name="runTestSuiteWithExplorer" depends="compile">
		<testng classpath="${testng.classpath}" outputDir="${output.dir}" haltOnFailure="false" verbose="2">
			<xmlfileset dir="." includes="K12BuildSuite.xml" />
		</testng>
	</target>

	<target name="runTestSuiteWithFireFoxAndExplorer" depends="compile">
		<antcall target="runTestSuiteWithExplorer" />
		<antcall target="runTestSuiteWithFireFox" />
	</target>

	<target name="startSeleniumServerAndRunTestSuiteWithFireFox" depends="init">
		<antcall target="startSeleniumServer" />
		<antcall target="runTestSuiteWithFireFox" />
		<antcall target="stopSeleniumServer" />
	</target>
	
	<target name="runDevTests" depends="startSeleniumServerAndRunDevTestSuiteWithFireFox" description="Shortcut to run dev tests"/>

	<target name="startSeleniumServerAndRunDevTestSuiteWithFireFox" depends="init">
		<antcall target="startSeleniumServer" />
		<antcall target="runDevTestSuiteWithFireFox" />
		<antcall target="stopSeleniumServer" />
	</target>
	
	<target name="startSeleniumServerAndRunTestSuiteWithExplorer" depends="init">
		<antcall target="startSeleniumServer" />
		<antcall target="runTestSuiteWithExplorer" />
		<antcall target="stopSeleniumServer" />
	</target>
	<target name="startSeleniumServerAndRunTestSuiteWithFireFoxAndExplorer" depends="init">
		<antcall target="startSeleniumServer" />
		<antcall target="runTestSuiteWithFireFoxAndExplorer" />
		<antcall target="stopSeleniumServer" />
	</target>

	<macrodef name="setEnvMacro">
	   <attribute name="env"/>
	   <sequential>
			<property name="selenium.server.host" value="${@{env}.selenium.server.host}"/>
			<property name="selenium.server.port" value="${@{env}.selenium.server.port}"/>
			
			<filter token="home.page.url" value="${@{env}.home.page.url}"/>
			<filter token="selenium.server.port" value="${@{env}.selenium.server.port}"/>
			<filter token="selenium.server.host" value="${@{env}.selenium.server.host}"/>
			<filter token="standard.page.load.wait.time" value="${@{env}.standard.page.load.wait.time}"/>
			<copy tofile="${basedir}/properties/environment.properties" filtering="true" overwrite="true">
			    <fileset dir="${basedir}/properties">
			    	<include name="template.environment.properties"/>
			    </fileset>
			</copy>
	   </sequential>
	</macrodef>

</project>
